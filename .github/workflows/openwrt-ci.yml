#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  # release:
  #   types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # ========================固件定制部分========================
          # 
          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 
          # 以下为定制化固件选项和说明:
          #
          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #
          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 
          # 编译x64固件:
          # cat >> .config <<EOF
          # CONFIG_TARGET_x86=y
          # CONFIG_TARGET_x86_64=y
          # CONFIG_TARGET_x86_64_Generic=y
          # EOF
          # 固件压缩:
          # cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # EOF
          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF
          # IPv6支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          # CONFIG_PACKAGE_ipv6helper=y
          # EOF
          # 多文件系统支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # CONFIG_PACKAGE_kmod-fs-squashfs=y
          # EOF
          # USB3.0支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y
          # EOF
          # 常用LuCI插件选择:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_luci-app-adbyby-plus=y
          # CONFIG_PACKAGE_luci-app-aria2=y
          # CONFIG_PACKAGE_luci-app-baidupcs-web=y
          # CONFIG_PACKAGE_luci-app-docker=y
          # CONFIG_PACKAGE_luci-app-frpc=y
          # CONFIG_PACKAGE_luci-app-kodexplorer=y
          # CONFIG_PACKAGE_luci-app-minidlna=y
          # CONFIG_PACKAGE_luci-app-openvpn=y
          # CONFIG_PACKAGE_luci-app-openvpn-server=y
          # CONFIG_PACKAGE_luci-app-qbittorrent=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          # CONFIG_PACKAGE_luci-app-ttyd=y
          # CONFIG_PACKAGE_luci-app-v2ray-server=y
          # CONFIG_PACKAGE_luci-app-verysync=y
          # CONFIG_PACKAGE_luci-app-webadmin=y
          # CONFIG_PACKAGE_luci-app-wireguard=y
          # CONFIG_PACKAGE_luci-app-wrtbwmon=y
          # EOF
          # LuCI主题:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_luci-theme-argon=y
          # CONFIG_PACKAGE_luci-theme-netgear=y
          # EOF
          # 常用LuCI插件选择:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-accesscontrol=n #访问时间控制
          CONFIG_PACKAGE_luci-app-adblock=n #ADB广告过滤
          CONFIG_PACKAGE_luci-app-adbyby-plus=n #广告屏蔽大师Plus +
          CONFIG_PACKAGE_luci-app-aliddns=y #阿里DDNS客户端
          CONFIG_PACKAGE_luci-app-amule=n #aMule下载工具
          CONFIG_PACKAGE_luci-app-aria2=n # Aria2下载工具
          CONFIG_PACKAGE_luci-app-cjdns=n #加密IPV6网络相关
          CONFIG_PACKAGE_luci-app-clamav=n #ClamAV杀毒软件
          CONFIG_PACKAGE_luci-app-commands=n #Shell命令模块
          CONFIG_PACKAGE_luci-app-cshark=n #CloudShark捕获工具
          CONFIG_PACKAGE_luci-app-ddns=y #动态域名 DNS
          CONFIG_PACKAGE_luci-app-diag-core=y #core诊断工具
          CONFIG_PACKAGE_luci-app-dnscrypt-proxy=y #DNSCrypt解决DNS污染
          CONFIG_PACKAGE_luci-app-dnscrypt-dnsforwarder=y #DNSForwarder防DNS污染
          CONFIG_PACKAGE_luci-app-dnspod=y #DNSPod
          CONFIG_PACKAGE_luci-app-dynapoint=n #DynaPoint(未知)
          CONFIG_PACKAGE_luci-app-e2guardian=n #Web内容过滤器
          CONFIG_PACKAGE_luci-app-filetransfer=n #文件传输
          CONFIG_PACKAGE_luci-app-firewall=n #添加防火墙
          CONFIG_PACKAGE_luci-app-flowoffload=y #Turbo ACC FLOW转发加速
          CONFIG_PACKAGE_luci-app-frpc=n #内网穿透 Frp
          CONFIG_PACKAGE_luci-app-fwknopd=n #Firewall Knock Operator服务器
          CONFIG_PACKAGE_luci-app-guest-wifi=n #WiFi访客网络
          CONFIG_PACKAGE_luci-app-hd-idle=n #硬盘休眠
          CONFIG_PACKAGE_luci-app-hnet=n #Homenet Status家庭网络控制协议
          CONFIG_PACKAGE_luci-app-lxc=n #LXC容器管理
          CONFIG_PACKAGE_luci-app-meshwizard=n #网络设置向导
          CONFIG_PACKAGE_luci-app-minidlna=n #完全兼容DLNA / UPnP-AV客户端的服务器软件
          CONFIG_PACKAGE_luci-app-mjpg-streamer=n #兼容Linux-UVC的摄像头程序
          CONFIG_PACKAGE_luci-app-mwan=n #MWAN负载均衡
          CONFIG_PACKAGE_luci-app-mwan3=n #MWAN3分流助手
          CONFIG_PACKAGE_luci-app-n2n_v2=n #N2N内网穿透 N2N v2 virtual服务
          CONFIG_PACKAGE_luci-app-nlbwmon=n #网络带宽监视器
          CONFIG_PACKAGE_luci-app-noddos=n #NodDOS Clients 阻止DDoS攻击
          CONFIG_PACKAGE_luci-app-ntpc=n #NTP时间同步服务器
          CONFIG_PACKAGE_luci-app-ocserv=n #OpenConnect virtual服务
          CONFIG_PACKAGE_luci-app-olsr=n #OLSR配置和状态模块
          CONFIG_PACKAGE_luci-app-olsr-services=n #OLSR服务器
          CONFIG_PACKAGE_luci-app-olsr-viz=n #OLSR可视化
          CONFIG_PACKAGE_luci-app-openvirtual=n #Openvirtual客户端
          CONFIG_PACKAGE_luci-app-openvirtual-server=n #易于使用的Openvirtual服务器 Web-UI
          CONFIG_PACKAGE_luci-app-oscam=n #OSCAM服务器（已弃）
          CONFIG_PACKAGE_luci-app-p910nd=n #打印服务器模块
          CONFIG_PACKAGE_luci-app-pagekitee=n #Pagekite内网穿透客户端
          CONFIG_PACKAGE_luci-app-polipo=n #Polipo代理(是一个小型且快速的网页缓存代理)
          CONFIG_PACKAGE_luci-app-pppoe-relay=y #PPPoE NAT穿透 点对点协议(PPP)
          CONFIG_PACKAGE_luci-app-ramfree=n #释放内存
          CONFIG_PACKAGE_luci-app-rp-pppoe-server=n #Roaring Penguin PPPoE Server 服务器
          CONFIG_PACKAGE_luci-app-samba=n #网络共享(Samba)
          CONFIG_PACKAGE_luci-app-samba4=n #网络共享(Samba4)
          CONFIG_PACKAGE_luci-app-sfe=y #Turbo ACC网络加速(开启Fast Path转发加速)
          CONFIG_PACKAGE_luci-app-splash=n #Client-Splash是无线MESH网络的一个热点认证系统
          CONFIG_PACKAGE_luci-app-sqm=n #流量智能队列管理(QOS)
          CONFIG_PACKAGE_luci-app-squid=n #Squid代理服务器
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-SSR-pro=y #S-S R-Pro
          CONFIG_PACKAGE_luci-app-unblockmusic=y
          CONFIG_PACKAGE_luci-app-SSRserver-python=y #s-sR Python服务器
          CONFIG_PACKAGE_luci-app-statistics=n #流量监控工具
          CONFIG_PACKAGE_luci-app-syncdial=n #多拨虚拟网卡(原macvlan)
          CONFIG_PACKAGE_luci-app-tinyproxy=n #Tinyproxy是 HTTP(S)代理服务器
          CONFIG_PACKAGE_luci-app-transmission=n #BT下载工具
          CONFIG_PACKAGE_luci-app-travelmate=n #旅行路由器
          CONFIG_PACKAGE_luci-app-ttyd=n #网页终端命令行
          CONFIG_PACKAGE_luci-app-udpxy=n #udpxy做组播服务器
          CONFIG_PACKAGE_luci-app-uhttpd=n #uHTTPd Web服务器
          CONFIG_PACKAGE_luci-app-unbound=n #Unbound DNS解析器
          CONFIG_PACKAGE_luci-app-upnp=n #通用即插即用UPnP(端口自动转发)
          CONFIG_PACKAGE_luci-app-usb-printer=n #USB 打印服务器
          CONFIG_PACKAGE_luci-app-v2ray-pro=n #V2Ray透明代理
          CONFIG_PACKAGE_luci-app-vlmcsd=n #KMS服务器设置
          CONFIG_PACKAGE_luci-app-vnstat=n #vnStat网络监控(图表)
          CONFIG_PACKAGE_luci-app-virtualbypass=n #virtual BypassWebUI 绕过virtual设置
          CONFIG_PACKAGE_luci-app-vsftpd=n #FTP服务器
          CONFIG_PACKAGE_luci-app-watchcat=n #断网检测功能与定时重启
          CONFIG_PACKAGE_luci-app-wireguard=n #virtual**服务器 WireGuard状态
          CONFIG_PACKAGE_luci-app-wol=n #WOL网络唤醒
          CONFIG_PACKAGE_luci-app-wrtbwmon=n #实时流量监测
          CONFIG_PACKAGE_luci-app-xlnetacc=n #迅雷快鸟
          CONFIG_PACKAGE_luci-app-zerotier=n #ZeroTier内网穿透
          EOF
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          # cat >> .config <<EOF
          # # CONFIG_TARGET_IMAGES_PAD is not set
          # # CONFIG_VMDK_IMAGES is not set
          # EOF
          # 
          # ========================固件定制部分结束========================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          find ./dl/ -size -1024c -exec rm -f {} \;
          df -h
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: Prepare artifact
        run: find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}

      - name: Upload config.seed
        uses: actions/upload-artifact@master
        with:
          name: config.seed
          path: ./bin/targets/*/*/config.seed

      - name: Upload firmware
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
